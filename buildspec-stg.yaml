version: 0.2
env:
  variables:
    SERVICE_NAME:             "python-serverless-template"
  parameter-store:
    SAM_S3_BUCKET:            "/python-serverless-template/build/SAM_S3_BUCKET"
    GITHUB_TOKEN:             "/python-serverless-template/build/GITHUB_TOKEN"

phases:
  install:
    commands:
      # Add execution permissions to the build tools
      - chmod +x ./tools/build/*.sh
      # Install Hub CLI for GitHub
      - ./tools/build/hub-installer.sh && PATH=$PATH:/opt/tools/hub/bin
      # Installing pip
      - pip install -U -q pip
      # Installing Python dependencies
      - pip install -q awscli aws-sam-cli aws-lambda-decorators yq
  build:
    commands:
      # Copy the contract OpenApi 3.0 spec to the S3 bucket, so it can later be transformed into the SAM template
      - aws s3 cp api-contract.yaml s3://$SAM_S3_BUCKET/stg
      # Execute packager tool so every lambda gets just the code and dependencies it needs
      - ./tools/build/packager.sh -q
      # Build the SAM template
      - sam build -s .build
      # Package the build
      - sam package --s3-bucket $SAM_S3_BUCKET --s3-prefix stg --output-template-file NewSamTemplate.yaml
      # Deploy the package
      - sam deploy --s3-bucket $SAM_S3_BUCKET --s3-prefix stg --no-fail-on-empty-changeset --capabilities CAPABILITY_NAMED_IAM --template-file NewSamTemplate.yaml --stack-name $SERVICE_NAME-stack --parameter-overrides RepoName=$SERVICE_NAME S3Bucket=$SAM_S3_BUCKET/stg
      # Remove all unneeded cloudformation stacks
      - ./tools/build/stack-remover.sh $SERVICE_NAME-stack-pr-
      # Remove all unneeded s3 folders inside SAM_S3_BUCKET
      - aws s3 rm s3://$SAM_S3_BUCKET/stg --recursive
      # Some integration tests could be run here and, if successful, trigger a production build in your production account
      # ...