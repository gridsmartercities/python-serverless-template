version: 0.2
env:
  variables:
    REPO_NAME:                "python-serverless-template"
  parameter-store:
    SAM_S3_BUCKET:            "/python-serverless-template/build/SAM_S3_BUCKET"

phases:
  install:
    commands:
      # Installing pip
      - pip install -U -q pip
      # Installing Python dependencies
      - pip install -q awscli aws-sam-cli aws-lambda-decorators yq
      # Installing jq, to be able to easily parse json (and yaml through the yq Python package) from the terminal
      - curl -qL -o jq https://stedolan.github.io/jq/download/linux64/jq && chmod +x ./jq
  build:
    commands:
      # Copy the contract OpenApi 3.0 spec to the S3 bucket, so it can later be transformed into the SAM template
      - aws s3 cp api-contract.yaml s3://$SAM_S3_BUCKET/
      # Add execution permissions to the packager tool
      - chmod u+x ./packager
      # Execute packager tool so every lambda gets just the code and dependencies it needs
      - bash ./packager -q
      # Build the SAM template
      - sam build -s .build -t template.yaml
      # Package the build
      - sam package --s3-bucket $SAM_S3_BUCKET --output-template-file NewSamTemplate.yaml
      # Deploy the package
      - sam deploy --s3-bucket $SAM_S3_BUCKET --no-fail-on-empty-changeset --capabilities CAPABILITY_NAMED_IAM --template-file NewSamTemplate.yaml --stack-name ${REPO_NAME}-stack --parameter-overrides RepoName=${REPO_NAME} S3Bucket=$SAM_S3_BUCKET

      # Some integration tests could be run here and, if successful, trigger a production build in your production account