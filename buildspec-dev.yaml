version: 0.2
env:
  variables:
    REPO_NAME:                "python-serverless-template"
  parameter-store:
    SAM_S3_BUCKET:            "/python-serverless-template/build/SAM_S3_BUCKET"
    GITHUB_TOKEN:             "/python-serverless-template/build/GITHUB_TOKEN"

phases:
  install:
    commands:
      # Add execution permissions to build tools
      - chmod u+x ./tools/build/*.sh
      # Set an alias to the update-commit-status, which creates commit statuses in GitHub
      - TAG="./tools/build/update-commit-status.sh"
      # Install Hub CLI for GitHub
      - ./tools/build/hub-installer.sh
      - PATH=$PATH:/opt/tools/hub/bin
      # Installing swagger cli for OpenApi 3.0 validation
      - npm install -g -q swagger-cli
      # Installing dredd contract testing tool
      - npm install -g -q dredd --unsafe-perm=true
      # Installing pip
      - pip install -U -q pip
      # Installing Python dependencies
      - pip install -q awscli aws-sam-cli bandit coverage dredd-hooks prospector==1.1.6.2 pylint_quotes aws-lambda-decorators yq pyyaml~=3.13
      # Installing jq, to be able to easily parse json (and yaml through the yq Python package) from the terminal
      - curl -qL -o jq https://stedolan.github.io/jq/download/linux64/jq && chmod +x ./jq
  pre_build:
    commands:
      # Validate the SAM template
      - $TAG "SAM validation" "aws cloudformation validate-template --template-body file://template.yaml"
      # Validate the OpenApi 3.0 specification
      - $TAG "Swagger validation" "swagger-cli validate api-contract.yaml"
      # Running all prospector tools for code quality analysis
      - $TAG "Prospector checks" "prospector"
      # Running bandit for security testing
      - $TAG "Bandit tests" "bandit -r -q ."
      # Running all unittests
      - $TAG "Unit tests" "./tools/dev/unit-tests.sh"
      # Checking that the code is 100% covered by unit tests
      - $TAG "Coverage check" "coverage report -m --skip-covered --fail-under=100 --omit=tests/*,it/*"
  build:
    commands:
      # Get the Pull Request number from GitHub as pr-#
      - export CLEAN_PR=$(echo $CODEBUILD_SOURCE_VERSION | tr '/' '-')
      # Copy the contract OpenApi 3.0 spec to the S3 bucket, so it can later be transformed into the SAM template
      - aws s3 cp api-contract.yaml s3://$SAM_S3_BUCKET/$CLEAN_PR/
      # Execute packager tool so every lambda gets just the code and dependencies it needs
      - ./tools/build/packager.sh -q
      # Build the SAM template
      - $TAG "SAM build" "sam build -s .build"
      # Package the build
      - $TAG "SAM package" "sam package --s3-bucket $SAM_S3_BUCKET --s3-prefix $CLEAN_PR --output-template-file NewSamTemplate.yaml"
      # Deploy the package
      - $TAG "SAM deploy" "sam deploy --s3-bucket $SAM_S3_BUCKET --no-fail-on-empty-changeset --capabilities CAPABILITY_NAMED_IAM --template-file NewSamTemplate.yaml --stack-name $REPO_NAME-stack-$CLEAN_PR --parameter-overrides RepoName=$REPO_NAME ApiNameSuffix=-$CLEAN_PR S3Bucket=$SAM_S3_BUCKET/$CLEAN_PR"
      # Get the ApiGateway Base URL
      - export BASE_URL=$(./tools/build/get-api-url.sh $REPO_NAME-apis-$CLEAN_PR)
      - echo BASE_URL is $BASE_URL
      # Run API Contract Tests against the Base URL
      - $TAG "Dredd contract tests" "dredd api-contract.yaml $BASE_URL --hookfiles=tests/hooks.py --hookfiles=tests/*/hooks.py --language python"
      # Run the integration tests
      - $TAG "Integration tests" "python -m unittest it/test_*.py"